	ФАЙЛОВАЯ СИСТЕМА
Создание зашифрованного раздела на /dev/sda5
Создание всех необходимых подразделов на зашифрованном

	УСТАНОВКА
Установка системы
Выбор только опции ssh server

	ПЕРВЫЙ ЗАПУСК И ПРОВЕРКА
// проверяем структуру разделов
lsblk
// логинимся под рутом (именно с минусом, для загрузки в папку root с root env переменными)
su -
// устанавливаем sudo - Substitute User and do
apt install sudo

	НАСТРОЙКА SSH
// правим конфиг ssh
nano /etc/ssh/sshd_config
// Меняем строки
Port 4242
PermitRootLogin no

	ROOT-ПРАВА ПОЛЬЗОВАТЕЛЮ
// -а добавить пользователя в дополнительную группу
// -G если пользователь — член группы, которой в указанном списке нет, то пользователь удаляется из этой группы
usermod -aG sudo <user>
// бэкапим конфиг sudo
cp /etc/sudoers /etc/sudoers.backup
// правим конфиг sudo
nano /etc/sudoers (visudo)
// добавляем строку с именем пользователя
<user> ALL=(ALL:ALL) ALL
// перезагружаемся
reboot

	ДОСТУП ЧЕРЕЗ ТЕРМИНАЛ
Проброс портов в virtualbox
ssh <user>@localhost -p 4242

	НАСТРОЙКА ВХОДА ПОД SUDO
// проверяем группы пользователей
groups root -> root
groups <user> -> <user> sudo cdrom floppy audio dip video plugdev netdev bluetooth
// проверяем и/или меняем имя машины
nano /etc/hostname
// проверяем имя хоста
nano /etc/hosts
// ещё раз правим конфиг судо
nano /etc/sudoers (visudo)
// меняем фразу при неудачном вводе
Defaults badpass_message="Your phrase"
// Устанавливаем количество попыток ввода
Defaults passwd_tries=3

	СОЗДАНИЕ ГРУППЫ
// создаём группу
addgroup user42
// помещаем туда нашего пользователя
usermod -aG user42 <user>

	ФАЙЕРВОЛ
// устанавливаем ufw
apt-get install ufw
// убеждаемся, что он не работает
ufw status
// запускаем файервол - прервется связь через ssh
ufw enable
// убеждаемся, что он работает
ufw status
// даём дефолтные настройки
ufw default deny incoming
ufw default allow outgoing
// разрешаем наш порт ssh
ufw allow 4242

	ПОЛИТИКА ПАРОЛЕЙ
// правим файл политики паролей
nano /etc/login.defs
// меняем значения строк как здесь:
PASS_MAX_DAYS 30
PASS_MIN_DAYS 2
PASS_WARN_AGE 7
// устанавливаем утилиту политики
apt-get install libpam-pwquality
// на всякий пожарный бэкапим конфиг
cp /etc/pam.d/common-password /etc/pam.d/common-password.backup
// правим конфиг
nano /etc/pam.d/common-password
// дописываем в эту строку следующим образом:
// dcredit максимальное количество цифр -1 -> минимальное кол-во = 1
// ucredit максимальное количество заглавных букв -1 -> минимальное кол-во = 1
// difok количесво символов которое должно быть изменено по сравнению со старым паролем
// reject_username отклоняет пароль, если содержит имя пользователя в прямой или обратной форме
// maxrepeat пароль не должен содержать более 3 последовательных одинаковых символов
password requisite	pam_pwquality.so retry=3 maxrepeat=3 minlen=10 dcredit=-1 ucredit=-1 reject_username difok=7
password requisite	pam_pwquality.so retry=3 maxrepeat=3 minlen=10 dcredit=-1 ucredit=-1 reject_username enforce_for_root
// меняем пароли пользователей в соответствии с политикой:
passwd user
passwd root
// применить макс мин сроки к пользователям
chage user
chage root

	НАСТРОЙКИ TTY
// SUDO настраиваем на использование TTY, значит нельзя запускать команды через ssh
// типа ssh someserver sudo somecommand
nano /etc/sudoers (visudo)
Defaults requiretty

	ЛОГИРОВАНИЕ SUDO
// сначала создать каталог и файл
nano /etc/sudoers (visudo)
Defaults logfile="/var/log/sudo/sudo.log"
Defaults log_input,log_output

	СОЗДАНИЕ СКРИПТА
cd ~/
touch monitoring.sh
chmod +x monitoring.sh
nano monitoring.sh
// заполняем скрипт командами
- Архитектура вашей операционной системы и ее версия ядра
arc=$(arch)
kernel=$(hostnamectl | grep "Kernel" | awk '{printf ("%s %s\n", $2, $3)}')
- Количество физических процессоров
pcpu=$(cat /proc/cpuinfo | grep "physical id" | wc -l)
- Количество виртуальных процессоров
vcpu=$(cat /proc/cpuinfo | grep processor | wc -l)
- Текущая доступная оперативная память на вашем сервере и ее коэффициент использования в процентах
mem_total=$(free -m | grep Mem | awk '{print $3}')
mem_used=$(free -m | grep Mem | awk '{print $2}')
mem_perc=$(free -m | grep Mem | awk '{printf ("(%.2f%%)", (($3/$2)*100))}')
// awk - программа для обработки и фильтрации текста
// -m флаг для вывода в мегабайтах
- Текущая доступная память на вашем сервере и ее коэффициент использования в процентах.
diskuse=$(df -h --total | grep total | awk '{printf ("%d/%dGb (%d%%)", $4, $2, $5)}')
// df показывает диски
// -h отобразить в гигабайтах
// --total добавляет в последнюю строку суммарную информацию по дискам
- Текущий коэффициент использования ваших процессоров в процентах
cpul=$(top -bn1 | grep '%Cpu' | awk '{printf("%.1f%%", $2 + $3)}')
// Команда `top` в реальном времени отображает информацию о загрузке системы, и запущенных процессах
// Стрoка `Cpu(s)` отражает процент затраченного процессором времени на выполнение процессов
// параметр `us`- отражает пользовательские процессы, параметр `sy`- процессы ядра;
// top -bn1
// -b - отключаем интерактивный режим
// -n1 - количество циклов обновления данных, после которых надо закрыть программу
- Дата и время последней перезагрузки.
lboot=$(who -b | awk '{print $3, $4}')
// -b (--boot) — показывает время загрузки операционной системы.
- Активен LVM или нет
lvm=$(cat /etc/fstab | grep /dev/mapper/ | wc -l)
islvm=$(if [ $lvm = 0 ]; then echo no; else echo yes; fi)
// Ищем строку grep /dev/mapper/ которая встречается только при использовании LVM
// в файле /etc/fstab , а командой wc -l смотри сколько таких строк
- Количество активных подключений
actcon=$(ss | grep tcp | wc -l | awk '{printf ("%d", $1)}')
// ss - отображает сетевую статистику
- Количество пользователей, использующих сервер
ulog=$(who | awk '{ print $1 }' | uniq | wc -l)
// uniq - предназначена для поиска одинаковых строк в массивах текста.
- IPv4-адрес вашего сервера и его MAC-адрес (Media Access Control)
ip=$(hostname -I)
mac=$(ip a | grep -m1 link/ether | awk '{print $2}')
// -m1 - кол-во отражаемых строк
- Количество команд, выполненных с помощью программы sudo
sudocom=$(cat /var/log/sudo/sudo.log | grep "COMMAND=" | wc -l)
- для срабатывания каждые 30 секунд
* * * * * ( sleep 30 ; /path/to/executable param1 param2 )
- чтобы не использовать в скипте wall
* * * * * | wall
и для каждой команды echo

	НАСТРОЙКА CRON
// добавляем скрипт в расписание
crontab -e
*/10 * * * *	sh /home/<user>/monitoring.sh
// просмотр
crontab -l
// start
/sbin/service crond start
// stop
/sbin/service crond stop

____________________
БОНУСНАЯ ЧАСТЬ

	УСТАНОВКА БАЗЫ ДАННЫХ
// настраиваем MariaDB:
apt install mariadb-server
mysql_secure_installation - настройка (везде yes, кроме установки пароля рута и в первом запросе нажать Enter)
// входим в оболочку MariaDB
mariadb
// создаём базу
>CREATE DATABASE wordpress;
// создаём пользователия для бд
>CREATE USER '<user>'@'localhost' IDENTIFIED BY '<password>';
// предоставляем пользователю полные привелегии для дб
>GRANT ALL ON wordpress.* TO '<user>'@'localhost';
>FLUSH PRIVILEGES; // flush - промывать
>exit
// проверка юзера
mariadb -u <user> -p
-u -> User for login if not current user
-p -> Password to use when connecting to server
// проверка бд
>SHOW DATABASES;

	УСТАНОВКА СЕРВЕРА
$apt install lighttpd
// смотрим порты
nano /etc/lighttpd/lighttpd.conf
// разрешаем доступ по порту сервера
ufw allow 80
ufw allow 8080 - если надо
Пробрасываем порты в virtualbox
Заходим в браузере по ip
127.0.0.1 (localhost)

	УСТАНОВКА PHP
// ставим php
apt install php php-cgi php-mysql
// запускам север в режиме fastcgi
// Интерфейс FastCGI — клиент-серверный протокол взаимодействия веб-сервера и приложения,
// дальнейшее развитие технологии CGI. По сравнению с CGI является более производительным и безопасным.
sudo lighttpd-enable-mod fastcgi
// подключаем к сереверу php
sudo lighttpd-enable-mod fastcgi-php
// перезагружаем сервис
service lighttpd force-reload
// для проверки создадим файл test.php в /var/www/html
<?php
phpinfo();
?>
localhost/test.php

	УСТАНОВКА WORDPRESS
// устанавливаем wget
apt install wget
// скачиваем вордпресс
wget https://ru.wordpress.org/latest-ru_RU.tar.gz
or wget https://wordpress.org/latest.tar.gz
// копируем его в папку сервера
cp latest.tar.gz /var/www/html/
// распаковываем
tar -xvzf latest-ru_RU.tar.gz

	ПРАВА ПАПКАМ
// меняем владельца папки с вордпрессом
// -R operate on files and directories recursively
chown -R www-data:www-data /var/www/html/wordpress
// применяем правильные права для всех папок и файлов
find /var/www/html/wordpress -type d -exec chmod 750 {} \;
find /var/www/html/wordpress -type f -exec chmod 640 {} \;

	УСТАНОВКА WP
// заходим через браузер:
http://127.0.0.1/wordpress
// вход в админку
http://localhost/wordpress/wp-login.php

	ДОПОЛНИТЕЛЬНЫЙ СЕРВИС: fail2ban
// установка
apt install fail2ban
// перезапуск
systemctl restart fail2ban
// проверка
service fail2ban status
// мой файл
nano /etc/fail2ban/jail.d/myssh.local
[sshd]
enabled = true
port = 4242
maxretry = 2
findtime = 600
bantime = 120
// общие настройки, менять не надо
nano /etc/fail2ban/jail.conf
// просмотр логов
tail /var/log/fail2ban.log
tail /var/log/auth.log
